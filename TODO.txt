TODO for Apple //e LLVM-MOS port:

HIGH PRIORITY:

- Add a CMakeLists.txt file that automatically bundles all of the common libraries you need.
  - Your current command is: "/path/to/mos-common-clang -Os -o output/hello.sys main.c apple-char-io.c prodos-exit.S -lexit-custom -linit-stack -lzero-bss"
  - Figure out how your CMakeLists file will get recognized at a program level.
  - Use https://github.com/llvm-mos/llvm-mos-sdk/blob/f5a0fa476d80bd8d4b837def49528bc28ba4ea71/mos-platform/sim/CMakeLists.txt as a reference.
  - Make sure you add:
    - init-stack (for printf/varargs/dynamic ProDOS syscalls)
    - exit-custom (for ProDOS QUIT)
  - It's quite possible, according to the "Extending_SDK" entry in the wiki,
    that you may need to do this as part of adding your platform to the SDK.
- Fill the system bitmap. You will need an extra _init library that does this
  with the program's current size and with the stack section.
  - Note that we _can't_ just fill the whole thing. The bitmap is also
    used by ProDOS itself to allocate file buffers.

MID PRIORITY:

- Get more stdlib input to work (in particular, the input function should be
  getchar(), not __getchar())
- Come up with a mechanism for dynamically assembling ProDOS syscalls
  - Because the byte and word for syscall parameters is expected to immediately
    follow the JSR $BF00 instruction, but the parameter pointers are expected
    to change as you, say, do lots of read() and write() calls, you will need
    a structure somewhere that you can safely fill with these parameter pointers
    (likely with an RTS at the end).
  - You could probably do this with a global, but you could also create locals
    each time. Test what the compiler does with this information.
- Write some functions that map to ProDOS file access calls, in order to have
  access to the disk.
  - These should be separate from true stdio calls, which will happen later.
  - (You probably should consider your SDK pull request experimental until
     you find a way to hide these functions.)
- Nail down exactly how the ProDOS bitmap is supposed to interact with our programs
  - Question: Does the ProDOS MLI automatically set our OPEN buffers for us,
    or do we need to set them ourselves?
  - Question: When we read files, does the file read buffer have to be marked as
    unprotected in the bitmap?
  - Question: If an io_buffer is marked as allocated, does that memory become
    protected? Does anything adverse happen if _we_ mark that area as protected?
  - Combine the answers to these questions to figure out what needs to happen
    to malloc() as additional memory is allocated, and/or if it's safe to allocate
    buffers and then read to them.

LOW PRIORITY:

- Expose an alternate linking strategy that causes the main body of the program to be copied
  to $6000 in order to allow HIRES graphics.
  - Include startup routines for this
  - (Ideally) Skip copying the copy routine to save however many bytes,
    or copy it such that the initial copy routine is in the last few bytes
    of HIRES Page 2.
  - Be sure to include the HIRES pages in the bitmap, and also ensure, as part of your copy routine,
    that /RAM has the two 8K files written to it to protect HIRES during auxilliary memory
    accesses.
- Write an alternate version of malloc() that uses the system bitmap (if needed)
  - There is already a simple malloc() implementation available in the common target
    (https://github.com/llvm-mos/llvm-mos-sdk/blob/f5a0fa476d80bd8d4b837def49528bc28ba4ea71/mos-platform/common/c/new.cc#L329),
    but it is likely you will need to write your own/modify what's here.
    Specifically, instead of assuming that the entire heap is available at our disposal,
    we should follow the lead of the allocator in K&R C and request more memory
    (through the morecore() function we previously wrote) as needed.
- Write the main stdio input/output functions (e.g. fgetc, fputc), based on ProDOS files.
  - stdio reference: https://cplusplus.com/reference/cstdio/
  - Put together the FILE struct you wish to use.
    Be sure to have points for stdin and stdout
  - Also include the appropriate constants/macros based on ProDOS's limits
    (e.g. up to 8 open files at once).
  - Note that a complicating factor is that not only do you want to use the Apple's builtin
    monitor for stdout, you would also like to support I/O redirection (such as to
    a printer) if it was set by an outside source. Of course, that second part might not
    be required (because ProDOS doesn't actually support output redirection)

WHEN YOU'RE READY:
- Include your port in the LLVM-MOS SDK (https://llvm-mos.org/wiki/Extending_SDK).
